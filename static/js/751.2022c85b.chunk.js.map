{"version":3,"file":"static/js/751.2022c85b.chunk.js","mappings":"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","sources":["components/commonStyle.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Header = styled.h1`\n  margin-top: 20px;\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nexport const HeaderContacts = styled.h2`\n  margin-top: 20px;\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { registerUser } from 'redux/auth/operations';\n\nimport { Header } from '../commonStyle.styled';\n\nimport { Button } from '@chakra-ui/react';\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const submitForm = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n\n    dispatch(\n      registerUser({\n        name: form.elements.userName.value,\n        email: form.elements.userEmail.value,\n        password: form.elements.userPassword.value,\n      })\n    );\n    form.reset();\n  };\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n\n  if (isLoggedIn) return <Navigate to=\"/contacts\" />;\n  return (\n    <main>\n      <Header>Register Your Account</Header>\n\n      <form onSubmit={submitForm}>\n        <FormControl marginBottom=\"10px\">\n          <FormLabel>Username</FormLabel>\n          <Input\n            name=\"userName\"\n            type=\"text\"\n            required\n            width=\"300px\"\n            placeholder=\"Enter your Name\"\n            variant=\"filled\"\n          />\n        </FormControl>\n        <FormControl marginBottom=\"10px\">\n          <FormLabel>Email address</FormLabel>\n          <Input\n            name=\"userEmail\"\n            type=\"email\"\n            required\n            width=\"300px\"\n            placeholder=\"Enter your Email\"\n            variant=\"filled\"\n          />\n        </FormControl>\n        <FormControl>\n          <FormLabel>Password</FormLabel>\n          <Input\n            name=\"userPassword\"\n            type=\"password\"\n            required\n            minLength={7}\n            width=\"300px\"\n            placeholder=\"Enter your Password\"\n            variant=\"filled\"\n          />\n        </FormControl>\n\n        <Button width=\"100px\" type=\"submit\" marginTop=\"20px\" colorScheme=\"blue\">\n          Log In\n        </Button>\n      </form>\n    </main>\n  );\n};\n\nexport default RegisterForm;","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["Header","styled","_templateObject","_taggedTemplateLiteral","HeaderContacts","_templateObject2","dispatch","useDispatch","useSelector","state","auth","isLoggedIn","_jsx","Navigate","to","_jsxs","children","onSubmit","evt","preventDefault","form","currentTarget","registerUser","name","elements","userName","value","email","userEmail","password","userPassword","reset","FormControl","marginBottom","FormLabel","Input","type","required","width","placeholder","variant","minLength","Button","marginTop","colorScheme","RegisterForm","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","_objectSpread","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps","_createContext","createContext","errorMessage","_createContext2","_slicedToArray","FormControlStylesProvider","_createContext3","strict","_createContext4","FormControlProvider","useMultiStyleConfig","_useFormControlProvid","idProp","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","concat","labelId","feedbackId","helpTextId","_useState","useState","_useState2","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","props2","arguments","length","undefined","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_excluded2","helperText","useFormControl","_useFormControlProps","_b","_c","disabled","readOnly","labelIds","push","join","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size"],"sourceRoot":""}